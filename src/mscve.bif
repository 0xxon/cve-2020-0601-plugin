# See the file "COPYING" in the main distribution directory for copyright.

%%{
#include "file_analysis/analyzer/x509/X509.h"
#include "openssl_curves.c"
%%}

## Check if a given certificate uses a well-known curve. This can, e.g., be used
## to check if a certificate might be might be part of a CVE-2020-0601
## attack.
##
## cert: certificate to check.
##
## Returns: a negative number if there was an error trying to parse the certificate,
##          1 if a curve was found for a certificate, and 0 if no fitting curve could
##          be found for a certificate. For the purposes of CVE-2020-0601, 0 is the
##          most suspicious return code; negative codes for EC-certificates are at least
##          unusual.
function cert_uses_known_curve%(cert: opaque of x509%): int
	%{
	file_analysis::X509Val* h = (file_analysis::X509Val*) cert;
	X509* x = h->GetCertificate();
	if ( ! x ) {
		builtin_error("opaque of x509 was not valid");
		return val_mgr->GetInt(-2);
	}
	EVP_PKEY *pkey = X509_extract_key(x);
	if ( ! pkey )
		return val_mgr->GetInt(-3);

	if ( EVP_PKEY_base_id(pkey) == EVP_PKEY_EC )
		{
		const EC_GROUP *group;
		if ( (group = EC_KEY_get0_group(EVP_PKEY_get0_EC_KEY(pkey))) == NULL )
			// I guess we could not parse this
			return val_mgr->GetInt(-4);

		auto ctx = BN_CTX_new();
		auto ret = ec_curve_nid_from_params(group, ctx);
		BN_CTX_free(ctx);
		return val_mgr->GetInt(ret);
		}
	return val_mgr->GetInt(-5);
	%}
